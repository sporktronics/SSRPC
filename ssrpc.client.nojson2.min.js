/*
  
  Stupid-Simple RPC
  (c) 2012 Sporktronics, LLC
  http://www.sporktronics.com/
  
  Licensed under the Lesser GPL, version 3.0:
     http://www.gnu.org/licenses/lgpl-3.0.html
  
*/var SSRPC = SSRPC || {};

(function() {
    var a = this;
    a._data = [], a._onError = [], a._onInfo = [], a._onWarn = [], a._onData = [], SSRPC.cmd = function(a, b, c, d) {
        b ? SSRPC.send({
            cmd: a,
            data: b
        }, c, d) : SSRPC.send({
            cmd: a
        }, c, d);
    }, SSRPC.send = function(b, c, d) {
        if (window.jQuery !== undefined) $.ajax({
            url: c,
            cache: !1,
            type: "POST",
            contentType: "application/json",
            dataType: "json",
            data: JSON.stringify({
                ssrpc: b
            }),
            success: function(b) {
                a._handleResponse(b, d);
            },
            error: function() {
                a._handleResponse({
                    ssrpc: {
                        error: {
                            request: "Error making asynchronous request"
                        }
                    }
                }, d);
            }
        }); else {
            function e() {
                var a = !1;
                if (typeof ActiveXObject != "undefined") try {
                    a = new ActiveXObject("Msxml2.XMLHTTP");
                } catch (b) {
                    try {
                        a = new ActiveXObject("Microsoft.XMLHTTP");
                    } catch (c) {
                        a = !1;
                    }
                } else if (window.XMLHttpRequest) try {
                    a = new XMLHttpRequest;
                } catch (b) {
                    a = !1;
                }
                return a;
            }
            var f = e();
            f ? (f.open("POST", c, !0), f.setRequestHeader("Content-type", "application/json"), f.send(JSON.stringify({
                ssrpc: b
            })), f.onreadystatechange = function() {
                f.readyState === 4 && (f.status === 200 ? f.responseText ? a._handleResponse(JSON.parse(f.responseText), d) : a._handleResponse({}, d) : a._handleResponse({
                    ssrpc: {
                        error: {
                            request: "Error making asynchronous request"
                        }
                    }
                }, d));
            }) : a._handleResponse({
                ssrpc: {
                    error: {
                        noAjax: "Asynchronous requests not supported"
                    }
                }
            }, d);
        }
    }, SSRPC.onError = function(b) {
        a._onError.push(b);
    }, SSRPC.onInfo = function(b) {
        a._onInfo.push(b);
    }, SSRPC.onWarn = function(b) {
        a._onWarn.push(b);
    }, SSRPC.onData = function(b) {
        a._onData.push(b);
    }, SSRPC.getData = function() {
        return a._data;
    }, SSRPC.getLastData = function() {
        return a._data[a._data.length - 1];
    }, a._handleResponse = function(b, c) {
        b || (b = {}), b.ssrpc ? a._data.push(b.ssrpc) : b.ssrpc = {
            warn: {
                emptyResponse: "The response from the server was empty."
            }
        }, b.ssrpc.error && a._handleAll(a._onError, b.ssrpc.error), b.ssrpc.info && a._handleAll(a._onInfo, b.ssrpc.info), b.ssrpc.warn && a._handleAll(a._onWarn, b.ssrpc.warn), b.ssrpc.data && a._handleAll(a._onData, b.ssrpc.data), c && c(b);
    }, a._handleAll = function(a, b) {
        for (i in a) for (j in b) a[i]({
            name: j,
            message: b[j]
        });
    };
})();